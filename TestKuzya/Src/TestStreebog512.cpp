#include "Kuzya.h"
#include "CppUnitTest.h"
using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using t = Hash<512>;
TEST_CLASS(TestStreebog512)
{
public:
    Block test = { 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30, 0x31, 0x32, 0x01 };
    Block k = { 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3, 0x74, 0xa5, 0xd4, 0xce, 0x2e, 0xfc, 0x83, 0xb3 };
    
    TEST_METHOD(PreTest)
    {
        Assert::IsTrue(t::BlockSize == 64);
        Assert::IsTrue(t::HashOutputSize == 64);
    }

    TEST_METHOD(Test_K1)
    {
        Block N, h = t::InitVector;
        Block zero = {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        Assert::IsTrue(N == zero, L"default init is not zero-init!!!");
        Assert::IsTrue(h == zero, L"h is not zero-init!!!");
        Assert::IsTrue(k == t::L(t::P(t::S(t::X(h, N)))), L"K1 is wrong!");
    }

    TEST_METHOD(Test_X_Transform)
    {
        Block result = { 0x44,0x94,0xe6,0xfd,0x1a,0xc9,0xb5,0x84,0x4c,0x9c,0xe4,0xff,0x1c,0xcf,0xb7,0x86,0x42,0x92,0xec,0xf7,0x1e,0xcd,0xb1,0x80,0x40,0x90,0xe2,0xf9,0x16,0xc5,0xb3,0x82,0x46,0x96,0xe0,0xfb,0x18,0xcb,0xbb,0x8a,0x44,0x94,0xe6,0xfd,0x1a,0xc9,0xb5,0x84,0x4c,0x9c,0xe4,0xff,0x1c,0xcf,0xb7,0x86,0x42,0x92,0xec,0xf7,0x1e,0xcd,0xb1,0xb2 };
        
        Assert::IsTrue(t::X(test, k) == result, L"Something went wrong...");
    }
    TEST_METHOD(Test_S_Transform)
    {
        Block result = { 0xea, 0x7a, 0x09, 0x4b, 0xf1, 0x37, 0x5e, 0x3e, 0xfd, 0x4e, 0x2d, 0xb6, 0x14, 0x89, 0x2f, 0x43, 0x2c, 0xec, 0xbe, 0xc0, 0x5f, 0xd9, 0x45, 0xdf, 0xeb, 0xe0, 0x67, 0x66, 0x99, 0xac, 0x92, 0x24, 0x48, 0xb0, 0x20, 0xc2, 0x17, 0xe4, 0x7d, 0xd6, 0xea, 0x7a, 0x09, 0x4b, 0xf1, 0x37, 0x5e, 0x3e, 0xfd, 0x4e, 0x2d, 0xb6, 0x14, 0x89, 0x2f, 0x43, 0x2c, 0xec, 0xbe, 0xc0, 0x5f, 0xd9, 0x45, 0x46 };
        
        Assert::IsTrue(t::S(t::X(test, k)) == result, L"Something went wrong...");
    }
    TEST_METHOD(Test_P_Transform)
    {
        Block result = { 0xea, 0xfd, 0x2c, 0xeb, 0x48, 0xea, 0xfd, 0x2c, 0x7a, 0x4e, 0xec, 0xe0, 0xb0, 0x7a, 0x4e, 0xec, 0x09, 0x2d, 0xbe, 0x67, 0x20, 0x09, 0x2d, 0xbe, 0x4b, 0xb6, 0xc0, 0x66, 0xc2, 0x4b, 0xb6, 0xc0, 0xf1, 0x14, 0x5f, 0x99, 0x17, 0xf1, 0x14, 0x5f, 0x37, 0x89, 0xd9, 0xac, 0xe4, 0x37, 0x89, 0xd9, 0x5e, 0x2f, 0x45, 0x92, 0x7d, 0x5e, 0x2f, 0x45, 0x3e, 0x43, 0xdf, 0x24, 0xd6, 0x3e, 0x43, 0x46 };
        
        Assert::IsTrue(t::P(t::S(t::X(test, k))) == result, L"Something went wrong...");
    }
    TEST_METHOD(Test_L_Transform)
    {
        Block result = { 0xb9, 0x1b, 0x12, 0x28, 0x50, 0xf6, 0xcd, 0x90, 0xf6, 0x2c, 0xad, 0x0d, 0xb2, 0x5f, 0x46, 0xbe, 0x35, 0x1e, 0xc0, 0x71, 0x4b, 0xfc, 0x43, 0xfc, 0xd4, 0x2f, 0x5c, 0x47, 0xdf, 0xa8, 0x78, 0xce, 0xa0, 0x12, 0xe2, 0xc0, 0xeb, 0x53, 0x79, 0x1e, 0xc2, 0xe4, 0x2a, 0x60, 0x89, 0x91, 0x57, 0x56, 0x3f, 0x65, 0x83, 0x31, 0x6f, 0x3f, 0xc7, 0x24, 0x80, 0x75, 0xe0, 0xd8, 0xd4, 0x59, 0x00, 0xe6 };
        
        Assert::IsTrue(t::L(t::P(t::S(t::X(test, k))))== result, L"Something went wrong...");
    }

    TEST_METHOD(Test_Key_Shedule)
    {
        Block result = { 0x1e, 0xcf, 0x46, 0x0c, 0xf7, 0x8a, 0xd1, 0xf4, 0x33, 0xec, 0x7e, 0x1d, 0xbd, 0x28, 0xf7, 0x36, 0x10, 0x30, 0x51, 0xa0, 0x2b, 0xcd, 0x69, 0x35, 0x97, 0x27, 0xda, 0xb2, 0xf0, 0x14, 0xbe, 0x88, 0xc1, 0xe9, 0xda, 0x07, 0x08, 0x01, 0x3d, 0xa7, 0xe9, 0x2e, 0xef, 0x3a, 0xd2, 0x02, 0xe9, 0xe0, 0x0d, 0xe8, 0x74, 0xc7, 0xeb, 0xc3, 0xf2, 0x13, 0x8f, 0xd7, 0x2f, 0x64, 0x07, 0x08, 0xb0, 0xd0 };
        Block x_result = { 0x73, 0xe0, 0x72, 0x3c, 0x77, 0x99, 0x03, 0x6e, 0x57, 0xe8, 0xa0, 0x02, 0x18, 0x88, 0xf5, 0xb6, 0x61, 0x76, 0xb4, 0x6a, 0x26, 0xd6, 0xc1, 0x11, 0x75, 0xcc, 0xb3, 0x5c, 0xbf, 0x1c, 0xff, 0xf8, 0x88, 0x61, 0x51, 0xbb, 0xa3, 0x44, 0xcd, 0xc2, 0x62, 0x75, 0x91, 0xe0, 0x6d, 0x8a, 0xe9, 0x9c, 0x6b, 0xd9, 0xb1, 0x0e, 0xaf, 0xd3, 0x48, 0x58, 0x9d, 0x7f, 0x1e, 0xd0, 0xf4, 0xa7, 0x8b, 0x02 };
        Block s_result = { 0x3d, 0x20, 0x19, 0x7f, 0x7e, 0xe8, 0x11, 0xb2, 0x12, 0xcb, 0xa7, 0xdd, 0x17, 0xd7, 0xf4, 0x55, 0xa1, 0x8a, 0x27, 0x78, 0xef, 0xf8, 0x58, 0x77, 0x35, 0x88, 0x92, 0x9c, 0x3b, 0x14, 0xb6, 0xd1, 0xd7, 0xa1, 0x70, 0x7d, 0x73, 0xea, 0xd9, 0xb3, 0x96, 0x35, 0x0f, 0x20, 0x9e, 0xd6, 0x9b, 0x4e, 0x6f, 0x53, 0x45, 0x04, 0x41, 0x49, 0xf2, 0xbf, 0x33, 0x57, 0x5f, 0xe1, 0xe6, 0x44, 0xf6, 0xdd };
        Block p_result = { 0x3d, 0x12, 0xa1, 0x35, 0xd7, 0x96, 0x6f, 0x33, 0x20, 0xcb, 0x8a, 0x88, 0xa1, 0x35, 0x53, 0x57, 0x19, 0xa7, 0x27, 0x92, 0x70, 0x0f, 0x45, 0x5f, 0x7f, 0xdd, 0x78, 0x9c, 0x7d, 0x20, 0x04, 0xe1, 0x7e, 0x17, 0xef, 0x3b, 0x73, 0x9e, 0x41, 0xe6, 0xe8, 0xd7, 0xf8, 0x14, 0xea, 0xd6, 0x49, 0x44, 0x11, 0xf4, 0x58, 0xb6, 0xd9, 0x9b, 0xf2, 0xf6, 0xb2, 0x55, 0x77, 0xd1, 0xb3, 0x4e, 0xbf, 0xdd };
        Block l_result = { 0x1e, 0xcf, 0x46, 0x0c, 0xf7, 0x8a, 0xd1, 0xf4, 0x33, 0xec, 0x7e, 0x1d, 0xbd, 0x28, 0xf7, 0x36, 0x10, 0x30, 0x51, 0xa0, 0x2b, 0xcd, 0x69, 0x35, 0x97, 0x27, 0xda, 0xb2, 0xf0, 0x14, 0xbe, 0x88, 0xc1, 0xe9, 0xda, 0x07, 0x08, 0x01, 0x3d, 0xa7, 0xe9, 0x2e, 0xef, 0x3a, 0xd2, 0x02, 0xe9, 0xe0, 0x0d, 0xe8, 0x74, 0xc7, 0xeb, 0xc3, 0xf2, 0x13, 0x8f, 0xd7, 0x2f, 0x64, 0x07, 0x08, 0xb0, 0xd0 };

        Assert::IsTrue(t::X(k, Constants::Iter_C[0]) == x_result, L"X");
        Assert::IsTrue(t::S(t::X(k, Constants::Iter_C[0])) == s_result, L"S");
        Assert::IsTrue(t::P(t::S(t::X(k, Constants::Iter_C[0]))) == p_result, L"P");
        Assert::IsTrue(t::L(t::P(t::S(t::X(k, Constants::Iter_C[0])))) == l_result, L"L");
        Assert::IsTrue(t::key_shedule(k, 0) == result, L"Something went wrong...");
    }

    TEST_METHOD(Test_E_Function)
    {
        Block result = { 0xd2, 0xeb, 0x09, 0x58, 0x47, 0xd1, 0xc8, 0x32, 0xe1, 0xcc, 0x81, 0x0e, 0x4b, 0x06, 0x75, 0xa0, 0x6a, 0xb6, 0x68, 0x15, 0x62, 0x3e, 0xdf, 0xe0, 0xf1, 0x8f, 0x8d, 0xbb, 0xa8, 0xcf, 0x64, 0x16, 0x8f, 0xbd, 0x47, 0x06, 0xed, 0xbd, 0x70, 0x1f, 0x96, 0x98, 0x68, 0x77, 0x75, 0x53, 0x9e, 0x20, 0x00, 0x76, 0x09, 0x10, 0x9d, 0x07, 0xde, 0xa4, 0x27, 0xfc, 0x14, 0xb8, 0xc8, 0x1d, 0x22, 0xfc };
        Assert::IsTrue(t::E(k, test) == result, L"Something went wrong...");
    }

    TEST_METHOD(Test_G_Function)
    {
        Block result = { 0xe2, 0xda, 0x3b, 0x6b, 0x73, 0xe4, 0xfe, 0x05, 0xd9, 0xf5, 0xb1, 0x3f, 0x79, 0x35, 0x41, 0x95, 0x5c, 0x81, 0x50, 0x2c, 0x52, 0x0f, 0xed, 0xd3, 0xc5, 0xba, 0xbb, 0x8c, 0x90, 0xf6, 0x54, 0x27, 0xbd, 0x8e, 0x73, 0x33, 0xdb, 0x8a, 0x48, 0x26, 0xa6, 0xa9, 0x5a, 0x44, 0x41, 0x66, 0xa8, 0x17, 0x38, 0x4f, 0x39, 0x21, 0xaf, 0x34, 0xea, 0x91, 0x11, 0xcb, 0x2c, 0x81, 0xf8, 0x2c, 0x10, 0xfd };
        Block N, Sigma, h = t::InitVector;

        Assert::IsTrue(t::G(h, test, N) == result, L"Something went wrong...");
    }

    TEST_METHOD(Test_AddMod512_Function)
    {
        Block a = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
        Block b = 2;

        Assert::IsTrue(t::AddMod512(a, b) == Block(1), L"Something went wrong...");
    }

    TEST_METHOD(Test_Hash_Function)
    {
        std::uint8_t message[] = { 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39, 0x30, 0x31, 0x32 };
        std::uint8_t result[] = { 0x1b, 0x54, 0xd0, 0x1a, 0x4a, 0xf5, 0xb9, 0xd5, 0xcc, 0x3d, 0x86, 0xd6, 0x8d, 0x28, 0x54, 0x62, 0xb1, 0x9a, 0xbc, 0x24, 0x75, 0x22, 0x2f, 0x35, 0xc0, 0x85, 0x12, 0x2b, 0xe4, 0xba, 0x1f, 0xfa, 0x00, 0xad, 0x30, 0xf8, 0x76, 0x7b, 0x3a, 0x82, 0x38, 0x4c, 0x65, 0x74, 0xf0, 0x24, 0xc3, 0x11, 0xe2, 0xa4, 0x81, 0x33, 0x2b, 0x08, 0xef, 0x7f, 0x41, 0x79, 0x78, 0x91, 0xc1, 0x64, 0x6f, 0x48 };
        auto hash = t::hash(message, 63);
        int check = std::memcmp(result, hash.data(), t::HashOutputSize);
        Assert::IsTrue(check == 0, L"Something went wrong...");
    }

    TEST_METHOD(Test_Hash_Function_2)
    {
        std::uint8_t message[] = { 0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8, 0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee, 0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8, 0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20, 0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1, 0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20, 0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0, 0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb, 0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb };
        std::uint8_t result[] = { 0x1e, 0x88, 0xe6, 0x22, 0x26, 0xbf, 0xca, 0x6f, 0x99, 0x94, 0xf1, 0xf2, 0xd5, 0x15, 0x69, 0xe0, 0xda, 0xf8, 0x47, 0x5a, 0x3b, 0x0f, 0xe6, 0x1a, 0x53, 0x00, 0xee, 0xe4, 0x6d, 0x96, 0x13, 0x76, 0x03, 0x5f, 0xe8, 0x35, 0x49, 0xad, 0xa2, 0xb8, 0x62, 0x0f, 0xcd, 0x7c, 0x49, 0x6c, 0xe5, 0xb3, 0x3f, 0x0c, 0xb9, 0xdd, 0xdc, 0x2b, 0x64, 0x60, 0x14, 0x3b, 0x03, 0xda, 0xba, 0xc9, 0xfb, 0x28 };
        auto hash = t::hash(message, 72);
        int check = std::memcmp(result, hash.data(), t::HashOutputSize);
        Assert::IsTrue(check == 0, L"Something went wrong...");
    }
};